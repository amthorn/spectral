/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Path: peg$parsePath },
      peg$startRuleFunction  = peg$parsePath,

      peg$c0 = function(protocol, origin, root, path) {
          return {
            protocol,
            origin,
            absolute: true,
            ...root,
            ...path
          }
        },
      peg$c1 = function(protocol, origin, root) {
          return {
            protocol,
            origin,
            absolute: true,
            ...root,
            path: []
          }
        },
      peg$c2 = "http://",
      peg$c3 = peg$literalExpectation("http://", true),
      peg$c4 = function(raw) {
            return 'http'
          },
      peg$c5 = "https://",
      peg$c6 = peg$literalExpectation("https://", true),
      peg$c7 = function(raw) {
            return 'https'
          },
      peg$c8 = "",
      peg$c9 = function() { return null },
      peg$c10 = function(protocol, root, path) {
          return {
            protocol,
            origin: null,
            absolute: true,
            ...root,
            ...path
          }
        },
      peg$c11 = "file://",
      peg$c12 = peg$literalExpectation("file://", true),
      peg$c13 = "file:",
      peg$c14 = peg$literalExpectation("file:", true),
      peg$c15 = function(raw) {
          return 'file'
        },
      peg$c16 = function(root, path) {
        return {
          protocol: 'file',
          origin: null,
          absolute: true,
          ...root,
          ...path
        }
      },
      peg$c17 = function() {
              return {
                drive: null
              }
            },
      peg$c18 = /^[A-Za-z]/,
      peg$c19 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
      peg$c20 = ":",
      peg$c21 = peg$literalExpectation(":", false),
      peg$c22 = function(drive) {
              return {
                drive: drive.toLowerCase() + ':'
              }
            },
      peg$c23 = function() {
            return {
              drive: null
            }
          },
      peg$c24 = function(path) {
          return {
            protocol: null,
            origin: null,
            absolute: false,
            drive: null,
            ...path
          }
        },
      peg$c25 = function(path) {
          return {
            path,
          }
        },
      peg$c26 = function(head, tail) { return [head, ...tail] },
      peg$c27 = function(head) { return [head] },
      peg$c28 = ".",
      peg$c29 = peg$literalExpectation(".", false),
      peg$c30 = "/",
      peg$c31 = peg$literalExpectation("/", false),
      peg$c32 = "\\",
      peg$c33 = peg$literalExpectation("\\", false),
      peg$c34 = /^[^\/\\]/,
      peg$c35 = peg$classExpectation(["/", "\\"], true, false),

      peg$currPos          = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsePath() {
    var s0;

    s0 = peg$parseRemotePath();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFileSchemaPath();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAbsolutePath();
        if (s0 === peg$FAILED) {
          s0 = peg$parseRelativePath();
        }
      }
    }

    return s0;
  }

  function peg$parseRemotePath() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseRemoteProtocol();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrigin();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePosixRoot();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsePathWrapper();
          if (s4 !== peg$FAILED) {
            s1 = peg$c0(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRemoteProtocol();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOrigin();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImplicitRoot();
          if (s3 !== peg$FAILED) {
            s1 = peg$c1(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseRemoteProtocol() {
    var s0;

    s0 = peg$parseHttpProtocol();
    if (s0 === peg$FAILED) {
      s0 = peg$parseHttpsProtocol();
    }

    return s0;
  }

  function peg$parseHttpProtocol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c2) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      { peg$fail(peg$c3); }
    }
    if (s1 !== peg$FAILED) {
      s1 = peg$c4();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHttpsProtocol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c5) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      s1 = peg$c7();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOrigin() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseNotSep();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseNotSep();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$c8;
      if (s1 !== peg$FAILED) {
        s1 = peg$c9();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseFileSchemaPath() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFileProtocol();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRoot();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePathWrapper();
        if (s3 !== peg$FAILED) {
          s1 = peg$c10(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFileProtocol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c11) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      { peg$fail(peg$c12); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c13) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        { peg$fail(peg$c14); }
      }
    }
    if (s1 !== peg$FAILED) {
      s1 = peg$c15();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAbsolutePath() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRoot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePathWrapper();
      if (s2 !== peg$FAILED) {
        s1 = peg$c16(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRoot() {
    var s0;

    s0 = peg$parsePosixRoot();
    if (s0 === peg$FAILED) {
      s0 = peg$parseWindowsRoot();
    }

    return s0;
  }

  function peg$parsePosixRoot() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSep();
    if (s1 !== peg$FAILED) {
      s1 = peg$c17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWindowsRoot() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c18.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      { peg$fail(peg$c19); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c20;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        { peg$fail(peg$c21); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSep();
        if (s3 !== peg$FAILED) {
          s1 = peg$c22(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImplicitRoot() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$c8;
    if (s1 !== peg$FAILED) {
      s1 = peg$c23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRelativePath() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCwd();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePathWrapper();
      if (s2 !== peg$FAILED) {
        s1 = peg$c24(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePathWrapper() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsePathSeq();
    if (s1 !== peg$FAILED) {
      s1 = peg$c25(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePathSeq() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDirectory();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSep();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePathSeq();
        if (s3 !== peg$FAILED) {
          s1 = peg$c26(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirectory();
      if (s1 !== peg$FAILED) {
        s1 = peg$c27(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCwd() {
    var s0;

    s0 = peg$parseExplicitCwd();
    if (s0 === peg$FAILED) {
      s0 = peg$parseImplicitCwd();
    }

    return s0;
  }

  function peg$parseDirectory() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseNotSep();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseNotSep();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$c8;
    }

    return s0;
  }

  function peg$parseExplicitCwd() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c28;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      { peg$fail(peg$c29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSep();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImplicitCwd() {
    var s0;

    s0 = peg$c8;

    return s0;
  }

  function peg$parseSep() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 47) {
      s0 = peg$c30;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      { peg$fail(peg$c31); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c32;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        { peg$fail(peg$c33); }
      }
    }

    return s0;
  }

  function peg$parseNotSep() {
    var s0;

    if (peg$c34.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      { peg$fail(peg$c35); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

var grammar = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
var grammar_1 = grammar.parse;

export default grammar;
export { grammar as __moduleExports, grammar_1 as parse };
